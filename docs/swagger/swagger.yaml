basePath: /v1
definitions:
  v1.PackageRequest:
    properties:
      height:
        example: 15
        type: number
      name:
        example: Package for Moxem
        type: string
      weight:
        example: 11.3
        type: number
      width:
        example: 13.8
        type: number
    required:
    - height
    - name
    - weight
    - width
    type: object
  v1.PackageResponse:
    properties:
      height:
        example: 15
        type: number
      name:
        example: Package for Moxem
        type: string
      ownerID:
        example: P1873eecd-c2d0-4aa2-a8d4-e0de232c5ac6
        type: string
      packageID:
        example: 6155c774-d1e2-4816-b7f4-52ebb949f044
        type: string
      status:
        example: new
        type: string
      weight:
        example: 11.3
        type: number
      width:
        example: 13.8
        type: number
    type: object
  v1.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
  v1.authUserRequest:
    properties:
      email:
        example: vadiminmail@gmail.com
        type: string
      password:
        example: qwerty123
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  v1.refreshAuthRequest:
    properties:
      refresh_token:
        type: string
      user_id:
        type: string
    required:
    - refresh_token
    - user_id
    type: object
  v1.registerUserRequest:
    properties:
      deliveryAddress:
        example: Pushkina street
        type: string
      email:
        example: vadiminmail@gmail.com
        type: string
      lastName:
        example: Valov
        type: string
      name:
        example: Vadim
        type: string
      password:
        example: qwerty123
        maxLength: 50
        minLength: 8
        type: string
    required:
    - deliveryAddress
    - email
    - lastName
    - name
    - password
    type: object
  v1.registerUserResponse:
    properties:
      deliveryAddress:
        example: Pushkina street
        type: string
      email:
        example: vadiminmail@gmail.com
        type: string
      id:
        example: d9e48656-ae36-4fde-af78-5f6250e11ead
        type: string
      lastName:
        example: Valov
        type: string
      name:
        example: Vadim
        type: string
    required:
    - deliveryAddress
    - email
    - id
    - lastName
    - name
    type: object
  v1.updateUserRequest:
    properties:
      deliveryAddress:
        example: Pushkina street
        type: string
      lastName:
        example: Valov
        type: string
      name:
        example: Vadim
        type: string
      password:
        example: qwerty123
        maxLength: 50
        minLength: 8
        type: string
    required:
    - deliveryAddress
    - lastName
    - name
    - password
    type: object
  v1.updateUserResponse:
    properties:
      deliveryAddress:
        example: Pushkina street
        type: string
      email:
        example: vadiminmail@gmail.com
        type: string
      id:
        example: d9e48656-ae36-4fde-af78-5f6250e11ead
        type: string
      lastName:
        example: Valov
        type: string
      name:
        example: Vadim
        type: string
    required:
    - deliveryAddress
    - email
    - id
    - lastName
    - name
    type: object
host: localhost:8080
info:
  contact: {}
  description: Delivery service
  title: Delivery service API
  version: "1.0"
paths:
  /packages:
    get:
      consumes:
      - application/json
      description: Returns user`s packages
      operationId: getPackages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.PackageResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Get packages
      tags:
      - packages
    post:
      consumes:
      - application/json
      description: Crates a package
      operationId: create
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.PackageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.PackageResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Create
      tags:
      - packages
  /packages/{packageID}:
    get:
      consumes:
      - application/json
      description: Returns package by id
      operationId: getPackage
      parameters:
      - description: package ID
        example: 6155c774-d1e2-4816-b7f4-52ebb949f044
        in: path
        name: packageID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.PackageResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Get package
      tags:
      - packages
    patch:
      consumes:
      - application/json
      description: Updates a package
      operationId: updatePackage
      parameters:
      - description: package ID
        example: 6155c774-d1e2-4816-b7f4-52ebb949f044
        in: path
        name: packageID
        required: true
        type: string
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.PackageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.PackageResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Update
      tags:
      - packages
  /users/user/auth:
    post:
      consumes:
      - application/json
      description: Authenticates user
      operationId: auth
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.authUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Auth
      tags:
      - users
  /users/user/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes users JWT token
      operationId: refresh
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.refreshAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Refresh
      tags:
      - users
  /users/user/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      operationId: register
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.registerUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.registerUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Register
      tags:
      - users
  /users/user/update:
    patch:
      consumes:
      - application/json
      description: Updates users data
      operationId: update
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.updateUserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Update
      tags:
      - users
swagger: "2.0"
